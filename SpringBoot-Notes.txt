SpringBoot Notes
Spring Boot is a framework for building applications in Java programming language.
Spring Boot makes it easy to create standalone production-grade Spring-based applications that you can just run.

We need to manually set up application context in the main method in a Spring application.
We use the @SpringBootApplication annotation on the main class.
This single annotation replaces the need for setting up manual Spring application context.
We no longer need to explicitly create an application context using annotation config application context as SpringBoot handles that behind the scenes. 

We use SpringApplication.run() to start the application, and Spring Boot takes care of configuring the embedded web server and other necessary components. 
The @SpringBootApplication annotation alone brings in a lot of pre-configured features including automatic component scanning and embedded server configuration, which would have required more steps in a traditional Spring setup. 







JAR - Java Archive (Can be simply run from CLI)
WAR - Web Application Archive (Should be deployed on a Web server)

To check the process ID or application running on your system :
tasklist /FI "PID eq <Process-ID>"

Maven - Build automation tool
		Dependency management tool
		
pom.xml - Project Object Model.xml

Maven Lifecycle : validate > compile > test > package > verify > install > deploy
validate - Checks if everything is written correctly in pom.xml
compile - Compile source code to target folder
test - Tests you app, if there are any tests written
package - Creates jar in target folder
install - Install the jar in you m2 local repository
deploy - To copy jar to a remote repository

clean - To remove everything in target folder

If Maven is not installed, we can use Maven wrapper provided by SpringBoot :
mvn validate is used to validate a project if mvn is installed in your system
When using Maven wrapper, we use command
./mvnw validate

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
Used to compare the pom.xml file and ensure that it is well formatted and can be correctly intepretted by Maven.

<properties>
		<java.version>1.8</java.version>
</properties>
The reason why we specify java version inside properties is to override maven plugin and let it know that the byte code generated should be compatible with version specified.

When we package or install an application, two jars are created :
<project-name>.jar - Contains all the compiled classes, resources, and dependencies packaged together, allowing you to run your application easily using the java -jar command.(FAT jar)
<project-name>.jar.original - Represent the original state of the JAR before modifications or optimizations were applied.

SpringBoot Maven plugin initially creates the .jar.original file and then repackages with all the dependencies.









In Java to create an object of a class, we use new operator :
Car car = new Car();

In SpringBoot we are externalizing the object creation part and is asking SpringBoot to create an object and give it to me in the class. 
This concept is called Inversion of Control(IOC).
We got to the IOC container and ask SpringBoot to create the object for me.
IOC Container has all the classes that are part of your SpringBoot project.
ApplicationContext is a way to implement IOC Container.

IOC Container won't store all the classes, it stored spatial classes, i.e classes with @Component annotation.
@Component annotation can be written over classes, interfaces, methods and even fields.
@Component will automically register the component(class/interface etc) as a Spring Bean and store in IOC container.(Bean ==> Object in Spring)

@SpringBootApplication is written over the main method class in a SpringBoot project.
Only one class will have @SpringBootApplication annotation in a project.
@SpringBootApplication performs three tasks : 
	@Configuration - If @Configuration is written over any class, Spring will know that class has declared multiple @Bean methods
	@EnableAutoConfiguration - Automatically use properties specified in properties.(If MongpDB is used and port, server, username, password etc is specified in properties file, Spring will automically configure and connect the DB for you)
	@ComponentScan - Scan for classes with @Component annotation under the base package.(Package which has class with @SpringBootApplication annotation)

@Autowired annotation is used for Dependency Injection.
We ask Spring to return an object stored in IOC container.





Spring Initializr - spring.io is used to set up a simple SpringBoot project with necessary dependencies
Group - com.<company-name>  : Used to specify company name which is developing the application in reverse domain fashion
Artifact : Used to specify the name of application that we are going to create.(Start with small letter)
Name : Name of application in human readable format
Description : Details of application that we are creating
Package Name : Group.Artifact








REST-API
REST : Representational State Transfer(Representational == > Client and Server and in b/w we transfer data)
API : Application Programming Interfaces
Used to communicate with an application running on a server.
Communication happens through a URL call to an API exposed by the application.
URL : 172.67.23.24:8080
Endpoint : 172.67.23.24:8080/ntfx/plans
REST-API : GET/POST/PUT/DELETE + 172.67.23.24:8080/ntfx/plans

To access the endpoint you need to add HTTP verb.
HTTP verbs are of 4 types :
	GET - To fetch and see some data. (To see data in DB)
	POST - To create something. (To create an entry in DB)
	PUT - To modify something. (To modify an entry in DB)
	DELETE - To delete something. (To delete an entry from DB)
	
@RestController - Annotation used to specify a component through which API calls enter the application.

@GetMapping - Used to map a function to an endpoint which uses GET verb and that returns some data.

@RequestMapping - Used to add an new mapping to the whole class(additional path to differentiate controllers).

Methods written inside a Controller class should be public so that they can be accessed and invoked by Spring framework or external HTTP requests.

@RequestBody - Asking Spring to take the data from the request and convert into a java object that we can use in code 

ORM - Object-Relational Mapping
ORM is a technique used by to map Java objects to database tables.
It allows developers to work with databases using object-oriented programming concepts, making it easier to interact with relational databases.

Consider a Java class User and a database table users.
ORM frameworks like Hibernate can map the fields in the User class to columns in the users table, making it easier to insert, update, retrieve and delete records.

JPA - Java Persistence API
A way to achieve ORM, includes interfaces and annotations that you use in your Java classes, requires a persistance provider(ORM tools) for implementation.
To use JPA, you need a persistance provider.
A persistance provider is a specific implementation of the JPA specification.
Examples of JPA Persistence providers include Hibernate, Eclipse Link and OpenJPA.
These providers implement the JPA interfaces and provide the underlying functionality to interact with databases.

Spring Data JPA
Spring Data JPA is built on top of the JPA(Java Persistence API) specification, but it is not a JPA implementation itself.
Instead, it simplifies working with JPA by providing higher level abstractions and utilities.
However, to use Spring Data JPA effectively, you still need a JPA implementation, such as Hibernate, EclipseLink or another JPA-compliant provider to handle the actual database interactions.

JPA is designed for working with relational databases, where data is stored in a predefined schema.
MongoDB on the otherhand is a NoSQL database that uses a different data model, typically based on collections of documents which are schema-less or have flexible schemas.
This fundamental difference in data models and storage structures is why JPA is not used with MongoDB.

In the case of MongoDB you don't have a traditional JPA persistance provider.
MongoDB is a NoSQL database, and Spring Data MongoDB serves as the persistance provider for MongoDB.
It provides the necessary abstractions and implementations to work with MongoDB in a Spring application.

Query Method DSL and Criteria API are two different ways to interact with a database when using Spring Data JPA for relational databases and Spring Data MongoDB for MongoDB databases.
Spring Data JPA is a part of the Spring framework that simplifies data access in Java applications, while Spring Data MongoDB provides similar functionality for MongoDB.

Query Method DSL is a simple and convenient way to create queries based on method naming conventions.
While the criteria API offers a more dynamic and programmatic approach for building complex and custom queries.

Best Practice in SpringBoot :
Controller ------> Service ------> Repository








Response Entity and Status Codes
Response Entity is part of the Spring Framework and is commonly used in SpringBoot applications to customize the HTTP response.
It provides methods for setting the response status, headers and body.
You can use it to return different types of data in your controller methods, such as JSON, XML or even HTML.
You can use Generics with Response Entity to specify the type of data you are returning.

An HTTP status code is a three digit numeric code returned by a webserver as part of a response to an HTTP request made by a client.
These codes are used to convey information about the result or status of the requested operation.
They are grouped into five categories based on their first digit :
1xx - Informational(These status codes indicate that the request was received and understood, and the server is continuing to process it. 
		Used for informational purposes and are rarely seen in practice.)

2xx - Successful (These status codes indicate thate the request was successfully received, understood and processed by the server)
	200 - OK (Request has been successfully processed and server is returning the requested resource)
	201 - CREATED (Request has been fulfilled and a new resource has been created as a result)
	204 - NO CONTENT (Request was successful, but there is no response body(typically used for operations that don't return data, like a successful deletion))
	
3xx - Redirection (These status codes indicate that further action is needed to complete the request. 
They are used when the client needs to take steps to access the requested resource)
	301 - MOVED PERMANENTLY (The requested resource has been permanently moved to a different URL)
	302 - FOUND (The HTTP status code 302 indicates that the requested resource has been temporarily moved to a different URL. 
					When a server sends a response with a 302 status code, it typically includes a location header 						field that specifies the new temporary URL
					where the client should redirect to.)
	304 - NOT MODIFIED (The client's cached version of the requested resource is still valid, so the server sends this status code 						to indicate that the client can use its cached copy)

4xx - Client Error (These status codes indicate that there an error on the client's part, such as a malformed request or authentication 			issues)
	400 - BAD REQUEST (The server cannot understand or process the client's request due to invalid syntax or other client-side 					issues)
	401 - UNAUTHORIZED (The client needs to provide authentication credentials to access the requested resource)
	403 - FORBIDDEN (The client is authenticated, but it doesn't have permission to access the request resource)
	
5xx - Server Error (These status codes indicate that there was an error on the server's part while trying to fulfil the request)
	500 - INTERNAL SERVER ERROR (A generic error message indicating that something went wrong on the server, and server couldn't 						handle the request)
	502 - BAD GATEWAY (The server acting as a gateway or proxy received an invalid response from an upstream server)
	503 - SERVICE UNAVAILABLE (The server is currently unable to handle the request due to a temporary overloading or maintenance)









Lombok Library
Lombok is a popular library in the Java ecosystem, often used in SpringBoot applications.
It aims to reduce the boilerplate code that developers have to write such as getters, setters, constructors etc.

Lombok acheives this by generating this code automically during compilation, based on annotations you add to your Java classes.
Lombok generates bytecode for methods like getters, setters, constructors, equals(), hashCode() and toString() as specified by the annotations used in your code.
This generated code is added to the compiled class files.(.class files)
The Java compiler compiles your classes, including the generated code.
This means that the generated methods become part of your compiled class files.
When you run your application, the generated methods are available for use, just like any other methods in your classes.











Spring Security
Spring Security is a powerful and highly customizable security framework that is often used in SpringBoot applications to handle authentication and authorization.
Authentication : The process of verifying a user's identity.(Eg : Username and Password)
Authorization : The process of granting or denying access to specific resources or actions based on the authenticated user's roles and permissions.

Dependency for Spring Security :
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>

Once the dependency is added, SpringBoot's auto-configuration feature will automatically apply security to the application.
By default, Spring Security uses HTTP Basic Authentication.(Postman -> Basic Auth : Add username and password)
The client sends an Authorization header : Authorization: Basic <encoded-string>.

Encoded credentials are combined into a string like username:password which is encoded using Base64.

The server decodes the string, extracts the username and password and verifies them.
If they're correct, access is granted. Otherwise, an "Unauthorized" response is sent back.

By default, all endpoints will be secured.
Spring Security will generate a default user with a random password that is printed in the console logs on startup.
You can also configure username and password in application.properties file.
spring.security.user.name=user
spring.security.user.password=password

@EnableWebSecurity
This annotation signals Spring to enable its web security support.
This is what makes your application secured.
It is used in conjunction with @Configuration.

WebSecurityConfigurerAdapter is a utility class in the Spring Security framework that provides default configurations and allow customization of certain features.
By extending it, you can configure and customize Spring Security for you application needs.

protected void configure(HttpSecurity http)
The configure() method provides a way to configure how requests are secured.
It defines how request matching should be done and what security actions should be applied.

http.authorizeRequests() : This tells Spring Security to start authorize the requests.

.anyMatchers("/hello").permitAll() : This part specifies that HTTP requests matching the path '/hello' should be permitted(allowed) for all users, 
									 whether they are authenticated or not.

.anyRequest.authenticated() : This is a more general matcher that specifies any request(not matched by previous matchers) should be authenticated, 
							  meaning users have to provide valid credentials to access these endpoints.
							  
.and() : This is a method to join several configurations. It helps to continue the configuration from the root.(HttpSecurity)

.formLogin() : This enables form-based authentication. By default, it will provide a form for the user to enter their username and password. 
			   If the user is not authenticated and they try to access a secured endpoint, they'll be redirected to the default login form.
			   
When we use the .formLogin() method in our security configuration without specifying .loginPage("/custom-path"), the default login page becomes active.

Spring Security provides an inbuilt controller that handles the /login path. 
This controller is responsible for rendering the default login form when a GET request is made to /login.

By default, Spring Security also provides a logout functionality. 
When .logout() is configured, a POST request to /logout will log the user out and invalidate their session.

Basic Authentication(Passing username and password in header) by its design is stateless.

Some applications do mix Basic Authentication with session management for various reasons. 
This isn't standard behaviour and requires additional setup and logic.
In such scenarios, once user credentials are verified via Basic Authentication, a session might be established, and the client is provided with a session cookie.
This way, the client won't need to send the Authorization header with every request, and the server can rely on the session cookie to identify the authenticated user.

When you login with Spring Security, it manages your authentication across multiple requests, despite HTTP being stateless.\

1) Session Creation : After successful authentication, an HTTP session is formed. Your authentication details are stored in the session.
2) Session Cookie : A JSESSIONID cookie is sent to your browser, which gets sent back with subsequent requests, helping the server recognize your session.
3) Security Context : Using the JSESSIONID, Spring Security fetches your authentication details for each request.
4) Session Timeout : Sessions have a limited life. If you're inactive past this limit, you're logged out.
5) Logout : When logging out, your session ends and the related cookie is removed.
6) Remember-Me : Spring Security can remember you even after the session ends using a different persistent cookie(typically have a longer lifespan).

In essense, Spring Security leverages sessions and cookies, mainly JSESSIONID, to ensure you remain authenticated across requests. 


Spring Security using users in DB. We need a few configurations :
1) A User entity to represent the user data model.
2) A repository UserRepository to interact with DB.
3) UserDetailsService implementation to fetch user details.(UserDetailsService interface is a part of Spring Security which has a function loadUserByUsername)
4) A configuration SecurityConfig to integrate everything with Spring Security.



JWT
JSON Web Token is a way to securely transmit information between parties as a JSON object.
JWT is a compact, URL-safe token that can carry information between parties.
JWT is a string consisting of three parts(Header, Payload and Signature), seperated by dots. 

Header:
The header typically consists of two parts :
The type of the token(JWT)
The signing algorithm being used(HMAC, SHA256, RSA etc)
{
    "alg": "HS256",
    "typ": "JWT"
}

Payload:
The payload contains the claims.
Claims are statements about an entity(typically the user) and additional metadata.
{
    "email": "email@gmail.com",
    "name": "John Doe"
}

Signature:
The signature is used to verify that the sender of the JWT is who it says it is and to ensure that the message wasn't changed along the way.
To create the signature part, you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.
HMACSHA256(
	secret,
	base64UrlEncode(header) + "." + base64UrlEncode(payload)
	)











Classpath - List of jars and directories that JVM uses.
A way to let JVM know that dependencies that it needs are present here.

How is application.properties file found by SpringBoot?
application.properties file will be present inside the root folder in the path /src/main/resources/. 
This path will be present in classpath and using this SpringBoot finds the application.properties file.

application.properties file syntax is key=value format.

We can use another format of file also to configure properties in SpringBoot - application.yml.(YAML)
YAML is a recursive acronym, i.e, its full form also has YAML.(YAML == YAML Ain't Markup Language)
It doesn't work like traditional markup languages and uses intendations.
File extension is .yml

If both application.properties file and application.yml file are present and have same key, then precedence is given to application.properties file's key value.

Another way to share properties is via cmd :
java -jar -<jar-name>.jar --<property-name>=<value>
Eg : java -jar journalApp.jar --server.port=8090

If same property is passed via CLI and present in yml file, precedence is given for CLI arguments.

So the order is CLI arguments -> application.properties -> application.yml










JUnit
Testing framework for Java to write tests.
@SpringBootTest : Annotation in Spring Boot that is used to indicate that a test class should run with Spring Boot’s testing support. 
				  It provides a way to load the full application context, making it suitable for integration testing where you want to test 
				  components in a Spring application together.

@Test: Marks a method as a test method.

@Disabled : Annotation in JUnit 5 (part of the Jupiter API) that is used to temporarily disable a test class or a test method.

Parameterized Tests: 
JUnit supports parameterized tests, allowing the same test to be run with different input values.

@ParameterizedTest : You can easily create parameterized tests using this annotation along with various sources for parameters.

JUnit 5 supports various sources for parameters, including:

@ValueSource: Provides a simple array of values.
@EnumSource: Uses enum constants as parameters.
@MethodSource: Calls a method to supply parameters.
@CsvSource: Provides comma-separated values for multiple parameters.
@CsvFileSource: Reads parameters from a CSV file.

Assertions: 
JUnit provides a set of assertion methods to test conditions. For example:

assertEquals(expected, actual): Checks if two values are equal.
assertTrue(condition): Checks if a condition is true.
assertFalse(condition): Checks if a condition is false.
assertNull(object): Checks if an object is null.

JUnit(Jupiter(JUnit5))
@BeforeEach: This annotation is used to specify a method that should be executed before each test method in a class
@AfterEach: This annotation indicates a method that should run after each test method. It's useful for cleaning up resources or resetting state.

@BeforeAll: An annotation that indicates a method to be executed once before any of the tests in a test class.
@AfterAll: n annotation that marks a method to be executed once after all tests in a test class have been run.

Mockito
@RunWith : Integrates the Spring Test framework with JUnit. It allows for Spring features like dependency injection to work within the tests.
@SpringBootTest: Indicates that the class is a Spring Boot test. It loads the full application context, making it suitable for integration tests.
@MockBean: Creates a mock of a Spring bean and adds it to the application context. 
		    This allows you to replace a real bean with a mock for testing purposes, enabling you to simulate different scenarios without relying 
			on the actual implementation.
@InjectMocks: Creates an instance of the class under test and injects the mocks (created with @Mock or @MockBean) into it. 
			  This is useful for unit testing, where you want to isolate the class under test from its dependencies.
@Test:Marks a method as a test method to be run by the testing framework (JUnit). It signifies that this method contains test logic.

Mockito.when():Used to specify what should be returned when a specific method on a mock is called.
assertEquals(): A JUnit assertion that checks if two values are equal. It’s used to verify that the actual output of the method matches the expected output.
Mockito.verify(): Verifies that a specific method on a mock was called with specified parameters. 
		  This is useful for ensuring that interactions with the mock happened as expected.






Profiling
mvn clean package -D spring.profiles.active=prod

java -jar app.jar --spring.profiles.active=prod







Logging
Logging is an essential aspect of application development that allows developers to monitor and trouble shoot their applications.
SpringBoot supports various logging frameworks, such as Logback, Log4j2 and Java Util Logging(JUL).

Logback : A popular logging framework that serves as the default in many SpringBoot applications. It offers flexible configuration and good performance.
Log4j2 : Another widely used logging framework with features such as asynchronous logging and support for various output formats.
Java Util Logging(JUL) : The default logging framework included in the Java Standard Edition. While it's less feature-rich than some of the third-party frameworks, it is straight forward and is part of the Java platform.
						 
Logback						 
SpringBoot comes with a default logging configuration that uses Logback as the default logging implementation. 
It provides a good balance between simplicity and flexibiliy.
The default configuration is embedded within the SpringBoot libraries, and it may not be visible in your project's source code.

If you want to customize the logging configuration, you can create your own logback-spring.xml or logback.xml file in src/main/resources/ directory.
When SpringBoot detects this file in your project, it will use it instead of the default configuration.

2024-10-16 12:21:18.757  INFO 17020 --- [           main] org.mongodb.driver.connection            : Opened connection [connectionId{localValue:7, serverValue:84705}] to cluster0-shard-00-02.bnk3k.mongodb.net:27017

2024-10-16 12:21:18.757 - Date Time
INFO - Log Levels(INFO, DEBUG, ERROR, TRACE etc)
17020 - Process Id
[           main] - Identifier of thread
org.mongodb.driver.connection - Package
Opened connection [connectionId{localValue:7, serverValue:84705}] to cluster0-shard-00-02.bnk3k.mongodb.net:27017 - Log Message

Logging Levels
They help to categorize log statements based on their severity. The common logging levels are :
TRACE 
DEBUG
INFO
WARN 
ERROR

We can set the desired logging level for specific packages or classes, allowing them to control the amount of information logged at runtime.
By default logging is enabled for INFO, WARN, ERROR.
TRACE and DEBUG should be enabled in application to obtain those loggers.

Spring Boot provides annotations like @Slf4j and @Log4j2 that you can automatically inject logger instances into your classes.
Slf4j is a logging abstraction framework which helps to use the underlying logging implementations.
Slf4j full form : Simple Logging Facade For Java

To write logger statements in a class, we need to creates a logger instance for that class,
private static final Logger logger = LoggerFactory.getLogger(UserService.class);

The above statement was what used to write before, but now we just need to annotate the class with @Slf4j.

SpringBoot allows you to configure logging using properties or YAML files.
logging:
	level:
		<base-package>: DEBUG
		
To completely disable loggers :
logging:
	level:
		root: OFF
		
logback.xml
The <configuration> element is the root element of the logback.xml file.
All Logback configuration is enclosed within this element.
