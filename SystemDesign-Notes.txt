System Design
System design is the process of designing the elements of a system such as architecture, modules and components, the different interfaces of those components and the data that goes through that system.

Types of System Design
HLD  -  High-Level Design
Describes the main components that would be developed for the resulting product.
The system architecture details, database design, services and processes, the relationship between various modules and features.

LLD  -  Low-Level Design
Describes the design of each element mentioned in the High-Level Design of the system.
Classes, interfaces, relationships between different classes, and actual logic of the various components.

Monolithic Architecture
Architecture - Internal design details for building the applications.
Web Application with Front-End, Back-End and Data Storage written and deployed together is called monolithic architecture.

If all the components and functionalities of a project are entangled and combined in a single codebase, then that is a monolithic application.
Monolithic architecture has less complexity ---> Easier to understand --> Higher productivity
Monolithic system is also known as centralized system.

Advantages
Best architecture if you're a beginner and just starting.
Since all modules are present in the single system, they require fewer network calls as compared to other architectures.
Comparatively easier to secure monolithic system.
Integration testing is easier and lesser confusion.

Disadvantages
In monolithic architecture, every module is combined in a single system, so if there is an error or bug in a single module, it can destroy the complete system.
Whenever a single module is updated, the whole system needs to be updated to reflect the changes to user. All modules are present in a single system and are connected to one another, so the whole system needs to be updated.
If there is any change in a single module's programming language or framework, it can affect the entire system. The entire system needs to be changed because every module is interlinked and tightly coupled.
