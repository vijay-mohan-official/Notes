-> What are the new Java8 features?
Lamda expressions for consise and flexible coding.
Streams for efficient data processing.
New Date-Time API for better date and time management.


-> Difference between a Lambda expression and an anonymous class
Lambda expression is a short way to write code that performs a task.
Sometimes it is used with a simple function in Java.

An anonymous class is used in Java to create a one-time use class without naming it and is used for more complex operations where a simple function is not enough.

(x, y) -> x + y  // A lambda expression that adds two numbers

//Anonyomous class
new SomeInterface() {
    @Override
    public int add(int x, int y) {
        return x + y;
    }
};


-> Difference between flatMap() and map()
map() transforms each item in a collection to something else and it produces a collection of the same size.
flatMap() also transforms each item but can combine items from nested collections into a single flat collection.

List<Integer> numbers = List.of(1, 2, 3, 4);
List<Integer> squaredNumbers = numbers.stream()
                                       .map(n -> n * n)
                                       .collect(Collectors.toList());
System.out.println(squaredNumbers); // [1, 4, 9, 16]

List<String> words = List.of("hello", "world");
List<String> letters = words.stream()
                            .flatMap(word -> Arrays.stream(word.split("")))
                            .collect(Collectors.toList());
System.out.println(letters); // [h, e, l, l, o, w, o, r, l, d]


-> Provide an example where you would use the reduce() operation in streams
Reduce operation in streams in useful when we want to combine all the items in a list to a single result just like adding up all numbers in a list to get the total.
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

        // Using reduce() to sum the numbers
        Optional<Integer> sum = numbers.stream()
                                       .reduce((a, b) -> a + b);

        sum.ifPresent(System.out::println); // Output: 15


-> Purpose of Optional class in Java 8 and problem it solves
Optional class in Java8 is used to prevent Null Pointer Exceptions or errors caused by null and thus helps to avoid crashes.
Used in situations where a specific value may or may not be present.


-> Describe method overloading briefly
Method overloading is a feature when we have multiple methods in the same class with same name but different parameters.
It is also used to perform similar operations in different ways depending on the inputs provided.


-> Can you overload a method by changing only the return type? Explain with an example.
No we cannot overload a method by changing only the return type because Java identified methods with their names and parameter types, not by their return types.

int myMethod() and double myMethod() functions in same class will lead to a complile time error


-> Internal Working of Hashmap
Hashmap in Java stores data in pairs of keys and values. 
It uses a hash function to convert the key into the index where value is stored.
Hashmaps allow fast access and retrieval of data.

-> What might happen if two keys have the same hashCode() value and how hashMap() handle such collisions?
If two keys in a hashmap have the same hashcode value, this will cause a collision.
Hashmap handles it by storing these keys and their values in a LinkedList or Tree at the same index.
To find the right key then hashmap goes to the index searches through the list or tree.


-> Describe the collision resolution mechanism in a Hashmap and how Java8 improves this mechanism.
Collision in a hashmap is resolved by storing in a LinkedList at each index in a HashMap. 
Java8 improves this by converting these lists to a balanced tree when the lists become too long.
This will speed up the search time.


-> Difference between == and .equal() with examples where they behave differently.
==(Reference Comparison) checks two references points to the same object.
.equal()(Content Comparison) checks if two objects have the same value.

Eg : Two strings objects with the same content will be true for .equal(), but false for ==
