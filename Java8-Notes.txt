Java8
Purpose of Java8 :
Concise and minimal code
We were missing functional programming benefits in OOPS nature
To enable parallel programming(More compatible code for multicore processors)

Features of Java8
Lambda expressions
Lambda expressions are similar to methods, but they do not need a name(anonymous functions) and they can be implemented right in the body of a method.
E.g: (x,y) -> x+y

Stream API
Java Stream API for Bulk Data
Operations on Collections(Arrays, Lists)

Date and Time API
Under the package java.time
Java8 offers a new date-time API

Base64 Encode Decode
For Base64 encoding, Java 8 has a built in encode and decode functions
The Base64 encoding class in java.util.Base64

Method Reference and Constructor Reference
:: operator

Default methods in Interfaces
Before it only had public abstract methods

Static methods in Interfaces

Functional Interface
A functional interface is an interface that has exactly one abstract method.
To designate an interface as a Functional Interface, we don't need to use the @FunctionalInterface annotation
Functional Interface == > SAM ==> Single Abstract Method

Optional Class

Java IO Improvements

Collection API Improvements










Lambda Expression
Lambda expression is an anonymous function
i.e,
Not having any name
Not having any return type
Not having modifier

Steps to make any function lambda expression,
1. Remove Modifier
2. Remove Return Type
3. Remove Method Name
4. Place arrow

Characteristics/Properties of Lambda Expressions
1. If body has just one statement, then we can remove curly braces.
2. Use type inference
Eg:
private void add(int a, int b){
	System.out.println(a+b);
}

converted to
(int a, int b) -> {System.out.println(a+b)}

converted to
(a,b) -> System.out.println(a+b);

3. No return keyword
Eg:
private int getStringLength(String str){
	return str.length();
}

converted to
(String str) -> {return str.length();}

converted to
(str) -> str.length();

4. If only one parameter, remove bracket
Eg:
converted to
str -> str.length();

Benefits of Lambda Expressions
1. To enable functional programming in Java
2. To make code more readable, maintainable and concise
3. To enable parallel processing
4. JAR file size reduction
5. Elimination of shadow variables











Functional Interface
Interface having exactly single abstract(Method has no body) method but can have any number of defaults and static methods.
We can invoke lambda expression by using Functional Interface.
@FunctionalInterface annotation is just to tell the compiler if there are more than one abstact method in the functional interface.

Inheritance in Functional Interface
If a functional interface is extended by another empty interface or an interface with same single abstact method in parent, 
then inherited interface will also be a functional interface.

Default methods(Methods with body) inside Interfaces
Until 1.7, only public abstact methods were allowed whether we declare by writing or not.
Similarly, public static final variable were allowed.
Since Java8 we can have concrete methods as well inside interfaces.

Static methods inside Interfaces
Static methods in Interface are those methods, which are defined in the interface with the keyword static.
They contain complete definition of the function.
Cannot be overridden or changed in the implementation class.
Can only be called inside the implementation class using the Interface name.

Functional Interface reference can be used to hold lambda expression.
Using lambda expression we don't need to use any seperate implementation class.

//Functional Interface
public interface Employee{
	String getName();
}

//Seperate Class created for Software Engineer or type Employee
public class SoftwareEngineer implements Employee{
	@Override
	public String getName(){
		return "Software Engineer";
	}
}

//Before Java 8
public class Main(){
	public static void main(String args[]){
		Employee employee = new SoftwareEngineer();
		System.out.println(employee.getName());
	}
}

Using Functional Interfaces and Lambda Expressions in Java 8, we create Software Engineer by,
public interface Employee{
	String getName();
}

public class Main(){
	public static void main(String args[]){
		Employee employee = () -> "Software Engineer";
}

We are writing implementation of abstact method written in Employee interface inside the Lambda expression.(No need to create class Software Engineer)

Threads using Lambda expressions
We use the Functional Interface Runnable to create threads.

//Implementing thread with Runnable Functional Interface
public class MyClass implements Runnable{
	@Override
	public void run(){
		for(int i=0; i<10; i++){
			System.out.println("Hello "+i);
		}
	}
}

//Before Java 8
public class Main(){
	public static void main(String args[]){
		MyClass myClass = new myClass();
		Thread childThread = new Thread(myClass); //Mentioning implementation class of Functional Interface Runnable
		childThread.run();
	}
}

//From Java 8 onwards
public class Main(){
	public static void main(String args[]){
		Runnable ru = () -> {
			for(int i=0; i<10; i++){
				System.out.println("Hello "+i);
			}
		};
		Thread childThread = new Thread(ru);
		childThread.run();
	}
}

Comparator in Java using Lambda expression
Comparator is also a Funtional Interface

//Before Java 8
public class Main(){
	public static void main(String args[]){
		List<Integer> list = new ArrayList<>();
		list.add(2);
		list.add(0);
		list.add(22);
		Collections.sort(list, new MyClass()); //Sorting in descending order
		System.out.println(list);
	}
}

public class MyClass implements Comparator<Integer>{
	@Override
	public int compare(int a, int b){
		return b-a; //a-b if you want to sort in ascending order
	}
}

In Java 8
public class Main(){
	public static void main(String args[]){
		List<Integer> list = new ArrayList<>();
		list.add(2);
		list.add(0);
		list.add(22);
		Collections.sort(list, (a,b) -> b-a ;); //Sorting in descending order, no need for implementation class MyClass
		System.out.println(list);
	}
}


Difference between Lambda Expression and Anonymous Inner Class
Lambda expression is used in case of single abstact method, but we use anonymous inner class, when we have more than one abstract methods
//Before Java8
public class Main(){
	public static void main(String args[]){
		Employee employee = new SoftwareEngineer();
	}
}

public interface Employee {
	String getSalary();
	String getDesignation();
}

public class SoftwareEngineer implements Employee {
	@Override
	public String getSalary(){
		return "10";
	}

	@Override
	public String getDesignation(){
		return "Software Engineer";
	}
}	

//After Java 8
public interface Employee {
	String getSalary();
	String getDesignation();
}

public class Main(){
	public static void main(String args[]){
		Employee employee = new Employee(){ //We don't need to implement a new class, instead use anonymous inner-class
			@Override
			public String getSalary(){
				return "20";
			}

			@Override
			public String getDesignation(){
				return "Test Engineer";
			}
		};
	}
}

Variables in lambda expressions
public interface Employee {
	String getSalary();
}

public class Main{
	int a = 2; //Instance variable of the Main class

	private void doSomething(){
		int b = 4;
		Employee e = () -> {
			a = 3;    //This can be changed, no issue
			b = 5;	  //This will be show an error, because local variables are final inside lambda expressions and cannot be changed
			return "100";
		};
	}
}



public interface Employee {
	String getSalary();
}

public class Main{
	private void doSomething(){
		int y = 20;
		Employee e = () -> {
			int x = 10;
			System.out.println(this.x);     //This will not work and will show error as x is a local variable
			System.out.println(this.y);	//This will work and no error is shown as we are accessing an instance variable of class Main
			return "100";
		};

		Employee employee = new Employee(){
			int z = 10;
			@Override
			public String getSalary(){
				System.out.println(this.z);   //This is accessible since it is an instance variable of the inner class
				System.out.println(this.y);   //This is not accessible and will return an error since we are trying to access the instance 					return "20";				variable of another class
			}
		};
	}
}

Predicates
Predicate is a functional interface which has an abstract function "test()" accepting one argument that returns a boolean value.
public class Main{
	public static void main(String args[]){
		Predicate<Integer> predicate = x -> x > 100000;
		System.out.println(predicate.test(1203));

		int salary = 100;
		if(predicate.test(salary)){
			//Business logic
		}
	}
}

If it was before Java 8,
public class Main{
	public static void main(String args[]){
		boolean flag = fun(1000);
	}

	//We had to write a seperate function, which is not needed as we can now use predicates
	private boolean fun(int x){
		return x > 1000000;
	}
}

The purpose of predicate is that it holds a condition which can be used anywhere in code, instead of duplicating the condition multiple times.
Very useful in streams concept, since filter() function expects argument as predicate. 

//Before Java8 sum of even numbers in a list
public class Main{
	public static void main(String args[]){
		List<Integer> numbers = Arrays.asList(1,2,3,4,5,6,7,8,9,10);
		int sum = 0;
		for(int number : numbers){
			sum += number;
		}
	}
}

//From Java8 onwards, sum of even numbers in a list
public class Main{
	public static void main(String args[]){
		List<Integer> numbers = Arrays.asList(1,2,3,4,5,6,7,8,9,10);
		int sum = numbers.stream().filter(n -> n % 2 == 0).mapToInt(n -> n).sum();
	}
}

Default and Static methods inside "Predicate" interface
and(), or(), negate() are the default methods inside Predicate
isEqual() is the static method inside Predicate

public class Main{
	public static void main(String args[]){
		Predicate<String> startsWithLetterV = x -> x.toLowerCase().charAt(0) == 'v';
		Predicate<String> endsWithLetterL = x -> x.toLowerCase().charAt(x.length() - 1) == 'l';

		Predicate<String> and = startsWithLetterV.and(endsWithLetterL);  //Using default function and() to create a new predicate which is a combination
		System.out.println(and.test("Vimal")); //true			 //of the previously created two predicates

		Predicate<String> or = startsWithLetterV.or(endsWithLetterL); 
		System.out.println(and.test("Vimal")); //true	

		System.out.println(startsWithLetterV.negate().test("Vivek")); //false

		Predicate<Object> predicate = Predicate.isEqual("Vimal");
		System.out.println(predicate.test("Vijay")); //false

	}
}

Function Interface
Function is a functional interface which has an abstract function "apply()" accepting one argument that returns a value.
public class Main{
	public static void main(String args[]){
		Function<String, Integer> function = x -> x.length();  //Function to return the length of a String
		System.out.println(function.apply("ABSCHBS")); //7

		Function<String, String> function2 = s -> s.subString(0,3);
		System.out.println(function2.apply("ABSCHBS")); //ABS

		Function<List<Student>, List<Student>> studentsWithVijAsPrefix = li -> {
			List<Student> result = new ArrayList<>();
			for(Student s : li){
				if(function2.apply(s.getName().equalsIgnoreCase("Vij"))){
					result.add(s);
				}
			}
			return result;
		 };

		Student s1 = new Student(1,"Vijay");
		Student s2 = new Student(2,"Amal");
		List<Student> students = Array.asList(s1,s2);

		List<Student> filteredStudents = studentsWithVijAsPrefix.apply(students);
		System.out.println(filteredStudents);
	}

	private static class Student(){
		private int id;
		private String name;

		public Student(int id, String name){
			this.id = id;
			this.name = name;
		}

		public int getId(){
			return id;
		}

		public void setId(int id){
			this.id = id;
		}

		public String getName(){
			return name;
		}

		public void setName(String name){
			this.name = name;
		}

		@Override
		public String toString(){
			return "Student{" +
				"id="+id +
				", name="+name + '\'
			'}';
		}
	}
}

Function chaining
public class Main{
	public static void main(String args[]){
		Function<String, String> function1 = s -> s.toUpperCase();
		Function<String, String> function2 = s -> s.subString(0,3);

		Function<String, String> stringFunction = function1.andThen(function2); //Chaining function1 with function2
		System.out.println(stringFunction("Vijay"));  //VIJ

		//Above line can be written as
		function1.andThen(function2).apply("Vijay");   //VIJ

		Function<String, String> function3 = x -> 2 * x;
		Function<String, String> function4 = x -> x * x * x;
		
		System.out.println(funtion3.andThen(function4).apply(3));   //216
		System.out.println(funtion4.andThen(function3).apply(3));   //54

		System.out.println(funtion3.compose(function4).apply(3));   //54    //When using compose() function4 is executed first and its result is passed 										    //onto function3

		Function<String, String> identityFunction = Function.identity();  //identity() function returns whatever that is passed as input parameter
		System.out.println(identityFunction.apply("Vijay"));  //Vijay
	}
}

Consumer Interface
Consumer interface just consumes data that is provided as argument for the accept() abstract function.
public class Main{
	public static void main(String args[]){
		Consumer<String> consumer = s -> System.out.println(s);
		consumer.accept("Vijay");

		Consumer<List<Integer>> listConsumer1 = li -> {
			for(Integer i : li){
				System.out.println(i+100);
			}
		};

		Consumer<List<Integer>> listConsumer2 = li -> {
			for(Integer i : li){
				System.out.println(i);
			}
		}

		Consumer<List<Integer>> listConsumer = listConsumer2.andThen(listConsumer1);
		listConsumer.accept(Arrays.asList(1,2,3,4));
}

Supplier Interface
Supplier Interface is a functional interface with one abstract method "get()".
public class Main{
	public static void main(String args[]){
		Supplier<Integer> supplier = () -> 1;
		System.out.println(supplier.get()); //1
	}
}

An example using the four functional interfaces :
public class Main{
	public static void main(String args[]){
		Predicate<Integer> predicate = x -> x % 2 == 0;
		Function<Integer, Integer> = x -> x * x;
		Consumer<Integer> = x -> System.out.println(x);
		Supplier<Integer> = () -> 100;

		if(predicate.test(supplier.get())){
			consumer.accept(function.apply(supplier.get()));  //10000
		}
	}
}




BiPredicate Interface
Purpose is same as Predicate Interface, but accepts two arguments.
public class Main{
	public static void main(String args[]){
		BiPredicate<Integer, Integer> biPredicate = (x,y) -> x % 2 == 0 && y % 2 == 0;
		System.out.println(biPredicate.test(2,4);  //true

		BiPredicate<String, Integer> biPredicate1 = (str,x) -> str.length() == x;
		System.out.println(biPredicate.test("ABCD",4);	//true
	}
}

BiFunction Interface
Same as Function Interface, but accepts two arguments.
public class Main{
	public static void main(String args[]){
		BiFunction<String, String, Integer> biFunction = (x,y) -> x.length() + y.length();
		System.out.println(biFunction.apply("ABCD","EFGH"));	//8
	}
}

BiConsumer Interface
Same as Consumer interface, but accepts 2 arguments
public class Main{
	public static void main(String args[]){
		BiConsumer<Integer, Integer> biConsumer = (x,y) -> System.out.println(x+y);
		biConsumer.accept(1,2);	//3
	}
}

//BiSupplier doesn't exist, a function will only return one value at all times

Unary Operator and Binary Operator Interface
Unary Operator Interface extends Function Interface and expects only one argument as input which will also be the return type.
public class Main{
	public static void main(String args[]){
		UnaryOperator<Integer> unaryOperator = x -> x * x;
		System.out.println(unaryOperator.apply(5));	//25
	}
}

Binary Operator extends BiFunction and expects only one argument as input which will also reflect as the return type of the result.
public class Main{
	public static void main(String args[]){
		BinaryOperator<String> biOperator = (str1, str2) -> str1 + str2;
		System.out.println(biOperator.apply("Hi"," Vijay");	//Hi Vijay
	}
}




Method and Constructor References
Method references allow us to refer to a method without invoking it, making our code cleaner and more readable. They can be used in place of a lambda expression when the lambda expression only calls an existing method.

public class Test{
	public static void print(String s){
		System.out.println(s);
	}
	
	public static void main(String args[]){
		List<String> students = Arrays.asList("Alice","Bob","Charlie");
		students.forEach(x -> System.out.println(x)); //Using lambda expression we are printing all students in List
		students.forEach(Test::print);	// :: is called method referencing operator(We are replacing above statememt with a reference to method "print" present in class Test)
	}
}
